#include<iostream>
#include<stdio.h>
#include<string>
#define TABLE_LENGTH 8
#define TABLE_WIDTH 8
using namespace std;
typedef struct loc {
	int x;
	int y;
}location;
bool solve_pro(int *table, location start);

int main() {
	int i,nodes = 64,destX,destY,j,X;
	int table[64];
	location loc;
	cout << "请输入起始节点(x,y),以空格隔开" << endl;
	cin >> destX >> destY;
	loc.x = destX - 1;
	loc.y = destY - 1;
	for (i = 0; i < 64; i++) table[i] = -1;
	if (solve_pro(table,loc)) {
		for(j=0;j<8;j++){
				X = 8*j;
				for(i=0;i<8;i++)cout<<table[X+i]<<" ";
			cout<<endl;
			}
			cout<<endl;
	}
	else return 1;
	return 0;
}

bool solve_pro(int *table, location start) {
	int movex[8] = { -2,-1,1,2,2,1,-1,-2 };
	int movey[8] = { 1,2,2,1,-1,-2,-2,-1 };
	int mul_choice[8];
	location cur_node,next;
	int i,j,top_stack=0,top_path=0,X,Y,mul_num,X2,Y2;
	location stack[1000];
	location path[64];
	stack[top_stack++] = start;
	while(top_path<64){
		cur_node = stack[--top_stack];
		if(cur_node.x == -1){
			cur_node = path[--top_path];
			table[8*cur_node.x+cur_node.y] = -1;
			continue;
		}
		else{
			int max,pos;
			path[top_path++] = cur_node;
			table[8*cur_node.x+cur_node.y] = top_path;
			next.x = -1;
			stack[top_stack++] = next;
			for(i=0;i<8;i++){
				X = cur_node.x + movex[i];
			    Y = cur_node.y + movey[i];
			    if(X < TABLE_LENGTH&&X >= 0 && Y < TABLE_WIDTH&&Y >= 0 && table[8 * X + Y] == -1){
			    	for(j=0,mul_num=0;j<8;j++){
			    		table[8*X+Y] = top_path+1;
			    		X2 = X + movex[j];
			    		Y2 = Y + movey[j];
			    		if(X2 < TABLE_LENGTH&&X2 >= 0 && Y2 < TABLE_WIDTH&&Y2 >= 0 && table[8 * X2 + Y2] == -1){
			    			mul_num++;
						}
					}
					table[8*X+Y] = -1;
					mul_choice[i] = mul_num;
				}
				else mul_choice[i] = -1;
			}
			for(i=0,max=-1,pos=-1;i<8;i++,max=-1,pos=-1){
				for(j=0;j<8;j++){
					if(max<mul_choice[j]){
						max = mul_choice[j];
						pos = j;
					}
				}
				if(pos == -1) break;
				else{
				mul_choice[pos] = -1;
				next.x = cur_node.x + movex[pos];
				next.y = cur_node.y + movey[pos];
				stack[top_stack++] = next; 	
				}
			}
		}
	} 
	return true;
}
